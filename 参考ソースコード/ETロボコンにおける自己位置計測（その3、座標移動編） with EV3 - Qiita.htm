<!DOCTYPE HTML>
<!-- saved from url=(0058)http://qiita.com/TetsuroAkagawa/items/075d74f5ab49f592450b -->
<!DOCTYPE html PUBLIC "" ""><HTML xmlns:og="http://ogp.me/ns#"><HEAD><META 
content="IE=11.0000" http-equiv="X-UA-Compatible">

<META charset="UTF-8"><TITLE>ETロボコンにおける自己位置計測（その3、座標移動編） with EV3 - 
Qiita</TITLE>
<META name="viewport" content="width=device-width,initial-scale=1">
<META name="description" content="&#10;&#10;座標移動計算&#10;&#10;&#10;座標移動の概要&#10;&#10;　第一回の距離計、第二回の方位計ときて、今回の第三回では「座標移動」を紹介します。これは、距離と方位を利用した応用技術になります。&#10;　座標移動とは、ロボットが移動する範囲を座標として考えて、その座標上の位置を指定しながらロボットを移動させていく技術となります。この技術を用いれば、座標位置を指定するだけでロボットを自由に移動させて動かすことができます。ただし、座標移動に用いている距離計、方位計には、移動するごとにタイヤのスリップなど...">
<META name="twitter:card" content="summary">
<META name="twitter:site" content="@Qiita">
<META name="twitter:creator" content="PsychoGundam009">
<META content="ETロボコンにおける自己位置計測（その3、座標移動編） with EV3 - Qiita" 
property="og:title">
<META content="article" property="og:type">
<META content="http://qiita.com/TetsuroAkagawa/items/075d74f5ab49f592450b" 
property="og:url">
<META content="http://cdn.qiita.com/assets/qiita-fb-2887e7b4aad86fd8c25cea84846f2236.png" 
property="og:image">
<META content="#座標移動計算&#10;##座標移動の概要&#10;　第一回の距離計、第二回の方位計ときて、今回の第三回では「座標移動」を紹介します。これは、距離と方位を利用した応用技術になります。&#10;　座標移動とは、ロボットが移動する範囲を座標として考えて、その座標..." 
property="og:description">
<META content="Qiita" property="og:site_name">
<META content="564524038" property="fb:admins"><LINK href="http://cdn.qiita.com/assets/favicons/public/production-4ff10c1e1e2b5fcb353ff9cafdd56c70.ico" 
rel="shortcut icon" type="image/x-icon"><LINK href="http://cdn.qiita.com/assets/favicons/public/apple-touch-icon-f9a6afad761ec2306e10db2736187c8b.png" 
rel="apple-touch-icon" type="image/png"><LINK title="Qiita" href="/opensearch.xml" 
rel="search" type="application/opensearchdescription+xml"><LINK href="ETロボコンにおける自己位置計測（その3、座標移動編）%20with%20EV3%20-%20Qiita.files/public-8f6b46e6e87d7bfce95ce8f6e214fde2.min.css" 
rel="stylesheet" media="all">
<META name="csrf-param" content="authenticity_token"> 
<META name="csrf-token" content="q8pezjCZs9K6fKlfjuwSHRkeLqXO6QlIRJD/UBR2Im9sH7VGTaSPPCx3r04LOQWTYOUwHW/TBFlMOSHXENQi5Q==">
<META name="GENERATOR" content="MSHTML 11.00.9600.18666"></HEAD>
<BODY class="without-js"><NOSCRIPT>&lt;iframe height="0" 
src="//www.googletagmanager.com/ns.html?id=GTM-TBQWPN" 
style="display:none;visibility:hidden" width="0"&gt;&lt;/iframe&gt;</NOSCRIPT>
<SCRIPT>
  document.body.className = document.body.className.replace('without-js', '') + ' with-js';
  window.Qiita = {"asset_host":"cdn.qiita.com","TLD":"com","controller_path":"public/items","controller_action":"public/items#show","controller":"items","action":"show","action_path":"public/items#show","env":"production","flash":{},"is_team_page":false,"request_parameters":{"controller":"public/items","action":"show","user_id":"TetsuroAkagawa","type":"items","id":"075d74f5ab49f592450b"},"root_domain":"qiita.com","variant":null,"config":{"mixpanel":{"career":"dd35af27e959781713d63fd7ca898a8d","per_team":"c0a2116368b33b44b5029ebd2cc9b094","public":"be87616606b0e26a87689099aab2c4e5","team":"b7c0342acba2dbc8742484d98788efb3"},"default_locale":"ja","locale":"ja"},"team":null,"user":null,"GIT_BRANCH":null,"DEBUG":false};

</SCRIPT>
 
<DIV class="headerContainer headerContainer-public" role="navigation">
<SCRIPT class="js-react-on-rails-component" type="application/json">{"component_name":"HeaderContainer","props":{"user":null,"team":null,"news":{"type":"募集","content":"QiitaやQiita:Teamを良くしたいエンジニア","url":"http://increments.co.jp/jobs/engineers?utm_source=qiita\u0026utm_medium=header_news"},"initial_unread_count":null,"siteid_image":"http://cdn.qiita.com/siteid-reverse.png","is_team_page":false,"on_team_setting":false,"show_post_menu":true,"show_search_menu":true,"is_fluid":false,"locale":"ja"},"trace":false,"dom_id":"HeaderContainer-react-component-f94f5661-7fd4-43ef-acc5-4990bf457331"}</SCRIPT>
     
<DIV 
id="HeaderContainer-react-component-f94f5661-7fd4-43ef-acc5-4990bf457331"></DIV></DIV>
<DIV id="main">
<SCRIPT type="application/ld+json">{  "@context": "http://schema.org",  "@type": "BreadcrumbList",  "itemListElement": [    {      "@type": "ListItem",      "position": 1,      "item": {        "@id": "/",        "name": "Qiita"      }    },    {      "@type": "ListItem",      "position": 2,      "item": {        "@id": "/items",        "name": "投稿"      }    },    {      "@type": "ListItem",      "position": 3,      "item": {        "@id": "/tags/ET%E3%83%AD%E3%83%9C%E3%82%B3%E3%83%B3",        "name": "ETロボコン"      }    }  ]}</SCRIPT>
<ARTICLE itemtype="http://schema.org/Article" itemscope="">
<DIV class="ArticleMainHeader ">
<DIV class="container"></DIV>
<DIV class="container">
<DIV class="row s-flex-align-center">
<DIV class="col-sm-9">
<H1 class="ArticleMainHeader__title" 
itemprop="headline">ETロボコンにおける自己位置計測（その3、座標移動編） with EV3</H1>
<UL class="TagList">
  <LI class="TagList__item" data-count="39"><A class="u-link-unstyled TagList__label" 
  href="http://qiita.com/tags/ET%E3%83%AD%E3%83%9C%E3%82%B3%E3%83%B3"><IMG 
  class="TagList__icon" alt="ETロボコン" src="ETロボコンにおける自己位置計測（その3、座標移動編）%20with%20EV3%20-%20Qiita.files/missing-2e17009a0b32a6423572b0e6dc56727e.png"><SPAN>ETロボコン</SPAN></A></LI>
  <LI class="TagList__item" data-count="61"><A class="u-link-unstyled TagList__label" 
  href="http://qiita.com/tags/EV3"><IMG class="TagList__icon" alt="EV3" src="ETロボコンにおける自己位置計測（その3、座標移動編）%20with%20EV3%20-%20Qiita.files/missing-2e17009a0b32a6423572b0e6dc56727e.png"><SPAN>EV3</SPAN></A></LI>
  <LI class="TagList__item" data-count="20"><A class="u-link-unstyled TagList__label" 
  href="http://qiita.com/tags/EV3RT"><IMG class="TagList__icon" alt="EV3RT" src="ETロボコンにおける自己位置計測（その3、座標移動編）%20with%20EV3%20-%20Qiita.files/missing-2e17009a0b32a6423572b0e6dc56727e.png"><SPAN>EV3RT</SPAN></A></LI>
  <LI class="TagList__item" data-count="42"><A class="u-link-unstyled TagList__label" 
  href="http://qiita.com/tags/TOPPERS"><IMG class="TagList__icon" alt="TOPPERS" 
  src="ETロボコンにおける自己位置計測（その3、座標移動編）%20with%20EV3%20-%20Qiita.files/missing-2e17009a0b32a6423572b0e6dc56727e.png"><SPAN>TOPPERS</SPAN></A></LI></UL></DIV>
<DIV class="col-sm-3">
<DIV class="itemsShowHeaderStock">
<UL class="list-unstyled itemsShowHeaderStock_statusList">
  <LI>
  <DIV class="itemsShowHeaderStock_count stock"><SPAN 
  class="fa fa-thumbs-up"></SPAN><SPAN class="js-likecount">1</SPAN></DIV>
  <DIV class="itemsShowHeaderStock_countText">いいね</DIV></LI>
  <LI>
  <DIV class="itemsShowHeaderStock_count" itemprop="commentCount" content="0 UserComments"><SPAN 
  class="fa fa-comment"></SPAN>0</DIV>
  <DIV class="itemsShowHeaderStock_countText">コメント</DIV></LI></UL></DIV>
<DIV class="js-likebutton" data-props='{"like_status":false,"like_count":1,"uuid":"075d74f5ab49f592450b","likable_type":"Article","position":"article-header"}'></DIV>
<UL class="list-inline ArticleMainHeader__users">
  <LI class="js-hovercard" data-hovercard-target-name="mossandayo"><A href="http://qiita.com/mossandayo" 
  itemprop="url"><IMG class="thumb thumb--xs" alt="mossandayo" src="ETロボコンにおける自己位置計測（その3、座標移動編）%20with%20EV3%20-%20Qiita.files/1476924209.png"></A></LI></UL></DIV></DIV></DIV></DIV>
<DIV class="ArticleAsideHeader">
<DIV class="container">
<DIV class="u-flex u-space-between">
<DIV class="u-flex u-flex-wrap">
<DIV class="u-flex u-align-center s-pdv-5 u-flex-wrap">
<DIV class="ArticleAsideHeader__author"><A href="http://qiita.com/TetsuroAkagawa"><IMG 
class="thumb thumb--xs" alt="5qjm6plv normal" src="ETロボコンにおける自己位置計測（その3、座標移動編）%20with%20EV3%20-%20Qiita.files/5QJm6PLv_normal.jpg"></A> 
<A class="u-link-unstyled" 
href="http://qiita.com/TetsuroAkagawa">TetsuroAkagawa</A> </DIV>
<DIV class="ArticleAsideHeader__date">
<META content="2017-01-20T23:08:49+09:00" itemprop="datePublished"><SPAN title="2017年01月20日に投稿" 
data-toggle="tooltip"><time itemprop="dateModified" datetime="2017-01-27T12:39:28+09:00">2017年01月27日</time>に更新</SPAN></DIV></DIV>
<DIV class="u-flex u-align-center s-pdv-5 mobile-hidden">
<DIV class="ArticleAsideHeader__revision"><A title="編集履歴" href="http://qiita.com/TetsuroAkagawa/items/075d74f5ab49f592450b/revisions" 
data-toggle="tooltip"><SPAN class="fa fa-history"></SPAN></A><SPAN class="ArticleAsideHeader__revisionCount">2</SPAN></DIV></DIV>
<DIV class="u-flex u-align-center s-pdv-5 mobile-hidden"></DIV></DIV>
<DIV class="u-flex u-align-center s-flex-justiry-between s-pdv-5 u-shrink-0">
<DIV class="ArticleAsideHeader__stock">
<DIV class="js-stockbutton" data-props='{"stock_status":false}' data-position="top"></DIV></DIV>
<DIV class="dropdown"><A class="dropdown-toggle" href="http://qiita.com/TetsuroAkagawa/items/075d74f5ab49f592450b#" 
data-toggle="dropdown"><SPAN class="fa fa-ellipsis-h fa-lg"></SPAN></A>
<UL class="dropdown-menu dropdown-menu-right">
  <LI class="dropdown__item--mobile"><A href="http://qiita.com/TetsuroAkagawa/items/075d74f5ab49f592450b/revisions"><SPAN 
  class="fa fa-fw fa-history"></SPAN> 編集履歴<SPAN>(2)</SPAN></A></LI>
  <LI><A 
  href="http://qiita.com/TetsuroAkagawa/items/075d74f5ab49f592450b.md"><SPAN 
  class="fa fa-fw fa-file-text-o"></SPAN> Markdownで本文を見る</A></LI>
  <LI><A href="http://qiita.com/TetsuroAkagawa/items/075d74f5ab49f592450b#" 
  data-toggle="modal" data-target=".js-report-form"><SPAN class="fa fa-fw fa-flag"></SPAN> 
  問題がある投稿を報告する</A></LI></UL></DIV></DIV></DIV></DIV></DIV>
<DIV class="container">
<DIV class="row" id="article-body-wrapper">
<DIV class="col-sm-9"><SECTION class="markdownContent markdownContent-headingEnabled js-task-list-container clearfix position-relative" 
id="item-075d74f5ab49f592450b" itemprop="articleBody">
<H1><SPAN class="fragment" id="座標移動計算"></SPAN><A href="http://qiita.com/TetsuroAkagawa/items/075d74f5ab49f592450b#%E5%BA%A7%E6%A8%99%E7%A7%BB%E5%8B%95%E8%A8%88%E7%AE%97"><I 
class="fa fa-link"></I></A>座標移動計算</H1>
<H2><SPAN class="fragment" id="座標移動の概要"></SPAN><A href="http://qiita.com/TetsuroAkagawa/items/075d74f5ab49f592450b#%E5%BA%A7%E6%A8%99%E7%A7%BB%E5%8B%95%E3%81%AE%E6%A6%82%E8%A6%81"><I 
class="fa fa-link"></I></A>座標移動の概要</H2>
<P>　第一回の距離計、第二回の方位計ときて、今回の第三回では「座標移動」を紹介します。これは、距離と方位を利用した応用技術になります。<BR>
　座標移動とは、ロボットが移動する範囲を座標として考えて、その座標上の位置を指定しながらロボットを移動させていく技術となります。この技術を用いれば、座標位置を指定するだけでロボットを自由に移動させて動かすことができます。ただし、座標移動に用いている距離計、方位計には、移動するごとにタイヤのスリップなどで誤差が生じていきます。よって、正確な移動が求められる場合には、「床の色」や「障害物にぶつかった際のジャイロの変動」などをトリガに、細かい間隔で距離計や方位計をリセットしていく必要があります。</P>
<H2><SPAN class="fragment" id="座標移動の計算式"></SPAN><A href="http://qiita.com/TetsuroAkagawa/items/075d74f5ab49f592450b#%E5%BA%A7%E6%A8%99%E7%A7%BB%E5%8B%95%E3%81%AE%E8%A8%88%E7%AE%97%E5%BC%8F"><I 
class="fa fa-link"></I></A>座標移動の計算式</H2>
<P>　それでは、座標移動の考え方を説明していきます。まずロボットがいる現在位置座標 a のXY座標を[aX, aY]とします。また移動目標座標 b 
のXY座標を[bX, bY]とします。すると、その座標 a と座標 b の2点間の関係性は下図のようになります。</P>
<P><A href="ETロボコンにおける自己位置計測（その3、座標移動編）%20with%20EV3%20-%20Qiita.files/fd2df3c6-861c-6cd5-80b7-a539a60357fa.png" 
target="_blank" rel="nofollow noopener"><IMG alt="moveImg.png" src="ETロボコンにおける自己位置計測（その3、座標移動編）%20with%20EV3%20-%20Qiita.files/fd2df3c6-861c-6cd5-80b7-a539a60357fa.png"></A></P>
<P>　この図での赤い線が「現在位置座標から目標座標までの距離」となります。また上図での角度 θ 
、つまり「現在位置座標からの目標座標への方位」は逆三角関数から計算することができ、arctanで表すことができます。逆三角関数について詳しく知りたい場合は、検索してみると多く説明されているので調べてみましょう。</P>
<H1><SPAN class="fragment" id="座標移動のサンプルプログラム"></SPAN><A href="http://qiita.com/TetsuroAkagawa/items/075d74f5ab49f592450b#%E5%BA%A7%E6%A8%99%E7%A7%BB%E5%8B%95%E3%81%AE%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0"><I 
class="fa fa-link"></I></A>座標移動のサンプルプログラム</H1>
<P>それでは座標移動関数のサンプルプログラムを用意しましたので、その説明をします。といっても、Grid.c内に記述されていることは、基本的に上記で説明した計算式を記述しているだけです。<BR>
　Grid_setDistance関数、Grid_setDirection関数の設定関数から、「移動目標座標までの距離」「移動目標座標への方位」を設定します。その後、Grid_getDistance関数とGrid_getDirection関数の取得関数を用いて、それぞれの値を利用します。<BR>
　この部分についての使い方も以前説明した「距離計」※1、「方位計」※2と大体同じ使い方になります。目標座標に移動を開始する最初の段階で、まず設定関数を呼び出して距離と方位を設定し、条件式などで値が必要な場合は取得関数から値を取り出します。</P>
<P>※1 「ETロボコンにおける自己位置計測（その1、距離計編） with EV3」<BR>- <A class="autolink" id="reference-e244341eeba9d7227ae8" 
href="http://qiita.com/PsychoGundam009/items/ba6190f08d26df7cc8ad">http://qiita.com/PsychoGundam009/items/ba6190f08d26df7cc8ad</A><BR>
※2 「ETロボコンにおける自己位置計測（その２、方位計編） with EV3」<BR>- <A class="autolink" id="reference-532cba1b37be8f3f3ba3" 
href="http://qiita.com/PsychoGundam009/items/4e7de30523d9c7ec6241">http://qiita.com/PsychoGundam009/items/4e7de30523d9c7ec6241</A></P>
<DIV class="code-frame" data-lang="c">
<DIV class="code-lang"><SPAN class="bold">Grid.c</SPAN></DIV>
<DIV class="highlight">
<PRE><SPAN class="cp">#include "Grid.h"</SPAN>

<SPAN class="cp">#define GRID_SIZE 100.0 </SPAN><SPAN class="c1">//座標のマス幅（100mm） </SPAN>

<SPAN class="k">static</SPAN> <SPAN class="kt">float</SPAN> <SPAN class="n">grid_distance</SPAN> <SPAN class="o">=</SPAN> <SPAN class="mf">0.0</SPAN><SPAN class="p">;</SPAN> <SPAN class="c1">//現在座標から目標座標までの距離</SPAN>
<SPAN class="k">static</SPAN> <SPAN class="kt">float</SPAN> <SPAN class="n">grid_direction</SPAN> <SPAN class="o">=</SPAN> <SPAN class="mf">0.0</SPAN><SPAN class="p">;</SPAN><SPAN class="c1">//現在座標から目標座標の方位</SPAN>

<SPAN class="cm">/* 初期化関数 */</SPAN>
<SPAN class="kt">void</SPAN> <SPAN class="nf">Grid_init</SPAN><SPAN class="p">()</SPAN> <SPAN class="p">{</SPAN>
    <SPAN class="n">grid_distance</SPAN> <SPAN class="o">=</SPAN> <SPAN class="mf">0.0</SPAN><SPAN class="p">;</SPAN>
    <SPAN class="n">grid_direction</SPAN> <SPAN class="o">=</SPAN> <SPAN class="mf">0.0</SPAN><SPAN class="p">;</SPAN>
<SPAN class="p">}</SPAN>

<SPAN class="cm">/* 座標aから座標bまでの移動距離を設定する関数 */</SPAN>
<SPAN class="kt">void</SPAN> <SPAN class="nf">Grid_setDistance</SPAN><SPAN class="p">(</SPAN><SPAN class="kt">int</SPAN> <SPAN class="n">aX</SPAN><SPAN class="p">,</SPAN> <SPAN class="kt">int</SPAN> <SPAN class="n">aY</SPAN><SPAN class="p">,</SPAN> <SPAN class="kt">int</SPAN> <SPAN class="n">bX</SPAN><SPAN class="p">,</SPAN> <SPAN class="kt">int</SPAN> <SPAN class="n">bY</SPAN><SPAN class="p">)</SPAN> <SPAN class="p">{</SPAN>
    <SPAN class="n">grid_distance</SPAN> <SPAN class="o">=</SPAN> <SPAN class="n">sqrt</SPAN><SPAN class="p">(</SPAN> <SPAN class="n">pow</SPAN><SPAN class="p">((</SPAN><SPAN class="kt">float</SPAN><SPAN class="p">)(</SPAN><SPAN class="n">bX</SPAN><SPAN class="o">-</SPAN><SPAN class="n">aX</SPAN><SPAN class="p">),</SPAN><SPAN class="mi">2</SPAN><SPAN class="p">)</SPAN> <SPAN class="o">+</SPAN> <SPAN class="n">pow</SPAN><SPAN class="p">((</SPAN><SPAN class="kt">float</SPAN><SPAN class="p">)(</SPAN><SPAN class="n">bY</SPAN><SPAN class="o">-</SPAN><SPAN class="n">aY</SPAN><SPAN class="p">),</SPAN><SPAN class="mi">2</SPAN><SPAN class="p">)</SPAN> <SPAN class="p">)</SPAN> <SPAN class="o">*</SPAN>  <SPAN class="n">GRID_SIZE</SPAN><SPAN class="p">;</SPAN>
<SPAN class="p">}</SPAN>

<SPAN class="cm">/* 座標aから座標bまでの移動距離を取得する関数 */</SPAN>
<SPAN class="kt">float</SPAN> <SPAN class="nf">Grid_getDistance</SPAN><SPAN class="p">()</SPAN> <SPAN class="p">{</SPAN>
    <SPAN class="k">return</SPAN> <SPAN class="n">grid_distance</SPAN><SPAN class="p">;</SPAN>
<SPAN class="p">}</SPAN>

<SPAN class="cm">/* 目標座標の方位を設定する関数 */</SPAN>
<SPAN class="kt">void</SPAN> <SPAN class="nf">Grid_setDirection</SPAN><SPAN class="p">(</SPAN><SPAN class="kt">int</SPAN> <SPAN class="n">aX</SPAN><SPAN class="p">,</SPAN> <SPAN class="kt">int</SPAN> <SPAN class="n">aY</SPAN><SPAN class="p">,</SPAN> <SPAN class="kt">int</SPAN> <SPAN class="n">bX</SPAN><SPAN class="p">,</SPAN> <SPAN class="kt">int</SPAN> <SPAN class="n">bY</SPAN><SPAN class="p">)</SPAN> <SPAN class="p">{</SPAN>
    <SPAN class="kt">float</SPAN> <SPAN class="n">targetDir</SPAN> <SPAN class="o">=</SPAN> <SPAN class="mf">0.0</SPAN><SPAN class="p">;</SPAN><SPAN class="c1">// 目標方位</SPAN>

    <SPAN class="c1">//　座標aから座標bへの方位（ラジアン）を取得</SPAN>
    <SPAN class="n">targetDir</SPAN> <SPAN class="o">=</SPAN> <SPAN class="n">atan2</SPAN><SPAN class="p">((</SPAN><SPAN class="kt">float</SPAN><SPAN class="p">)(</SPAN><SPAN class="n">bY</SPAN><SPAN class="o">-</SPAN><SPAN class="n">aY</SPAN><SPAN class="p">),</SPAN> <SPAN class="p">(</SPAN><SPAN class="kt">float</SPAN><SPAN class="p">)(</SPAN><SPAN class="n">bX</SPAN><SPAN class="o">-</SPAN><SPAN class="n">aX</SPAN><SPAN class="p">));</SPAN>
    <SPAN class="c1">//ラジアンから度に変換</SPAN>
    <SPAN class="n">targetDir</SPAN> <SPAN class="o">=</SPAN> <SPAN class="n">targetDir</SPAN> <SPAN class="o">*</SPAN> <SPAN class="mf">180.0</SPAN> <SPAN class="o">/</SPAN> <SPAN class="n">PI</SPAN><SPAN class="p">;</SPAN>

    <SPAN class="n">grid_direction</SPAN> <SPAN class="o">=</SPAN> <SPAN class="n">targetDir</SPAN><SPAN class="p">;</SPAN>
<SPAN class="p">}</SPAN>

<SPAN class="cm">/* 目標座標の方位を取得する関数 */</SPAN>
<SPAN class="kt">float</SPAN> <SPAN class="nf">Grid_getDirection</SPAN><SPAN class="p">()</SPAN> <SPAN class="p">{</SPAN>
    <SPAN class="k">return</SPAN> <SPAN class="n">grid_direction</SPAN><SPAN class="p">;</SPAN>
<SPAN class="p">}</SPAN>
</PRE></DIV></DIV>
<P>　Grid.hでは、cファイルで記述されている関数をまとめて宣言しています。<BR>
　ここで"Distance.h"をincludeしている理由は、Distance.h内で定義されている円周率を利用したいという理由だけです。また．math.hをincludeしていますが、これはたまにインクルードしてくれない（読み込めない）エラーが出ることがあります。これはMakefile.inc内の末尾に「LIBS 
+= -lm -lc」を追加して書けば解決するので、もしエラーが出た場合は試してみてください。</P>
<DIV class="code-frame" data-lang="c">
<DIV class="code-lang"><SPAN class="bold">Grid.h</SPAN></DIV>
<DIV class="highlight">
<PRE><SPAN class="cp">#ifndef _GRID_H_</SPAN>
<SPAN class="cp">#define _GRID_H_</SPAN>

<SPAN class="cp">#include "math.h"</SPAN>
<SPAN class="cp">#include "Distance.h"</SPAN>

<SPAN class="cm">/* 初期化関数 */</SPAN>
<SPAN class="kt">void</SPAN> <SPAN class="nf">Grid_init</SPAN><SPAN class="p">();</SPAN>
<SPAN class="cm">/* 座標aから座標bまでの移動距離を設定する関数 */</SPAN>
<SPAN class="kt">void</SPAN> <SPAN class="nf">Grid_setDistance</SPAN><SPAN class="p">(</SPAN><SPAN class="kt">int</SPAN> <SPAN class="n">aX</SPAN><SPAN class="p">,</SPAN> <SPAN class="kt">int</SPAN> <SPAN class="n">aY</SPAN><SPAN class="p">,</SPAN> <SPAN class="kt">int</SPAN> <SPAN class="n">bX</SPAN><SPAN class="p">,</SPAN> <SPAN class="kt">int</SPAN> <SPAN class="n">bY</SPAN><SPAN class="p">);</SPAN>
<SPAN class="cm">/* 座標aから座標bまでの移動距離を取得する関数 */</SPAN>
<SPAN class="kt">float</SPAN> <SPAN class="nf">Grid_getDistance</SPAN><SPAN class="p">();</SPAN>

<SPAN class="cm">/* 目標座標の方位を設定する関数 */</SPAN>
<SPAN class="kt">void</SPAN> <SPAN class="nf">Grid_setDirection</SPAN><SPAN class="p">(</SPAN><SPAN class="kt">int</SPAN> <SPAN class="n">aX</SPAN><SPAN class="p">,</SPAN> <SPAN class="kt">int</SPAN> <SPAN class="n">aY</SPAN><SPAN class="p">,</SPAN> <SPAN class="kt">int</SPAN> <SPAN class="n">bX</SPAN><SPAN class="p">,</SPAN> <SPAN class="kt">int</SPAN> <SPAN class="n">bY</SPAN><SPAN class="p">);</SPAN>
<SPAN class="cm">/* 目標座標の方位を取得する関数 */</SPAN>
<SPAN class="kt">float</SPAN> <SPAN class="nf">Grid_getDirection</SPAN><SPAN class="p">();</SPAN>

<SPAN class="cp">#endif</SPAN>
</PRE></DIV></DIV>
<H2><SPAN class="fragment" id="座標移動プログラムの実行例動画"></SPAN><A href="http://qiita.com/TetsuroAkagawa/items/075d74f5ab49f592450b#%E5%BA%A7%E6%A8%99%E7%A7%BB%E5%8B%95%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E3%81%AE%E5%AE%9F%E8%A1%8C%E4%BE%8B%E5%8B%95%E7%94%BB"><I 
class="fa fa-link"></I></A>座標移動プログラムの実行例（動画）</H2>
<P>　以下に、座標移動関数の呼び出し実行例を載せます。ここでは開始位置座標[0,0]から順に[2,5]、[3,3]、[4,2]、[5,5]と移動していきます。<BR><A 
href="http://www.youtube.com/watch?v=zNoVS0vNRz0" target="_blank" rel="nofollow noopener"><IMG 
alt="IMAGE ALT TEXT HERE" src="ETロボコンにおける自己位置計測（その3、座標移動編）%20with%20EV3%20-%20Qiita.files/0.jpg"></A></P>
<P>　以下がmain文での呼び出し記述例になります。先述の座標移動関数から「現在位置座標から目標座標までの方位」と「現在位置座標から目標座標までの距離」を取得し、その値をもとに旋回→移動→旋回→移動→...と繰り返して、各目標座標を移動していきます。また、ここで使っているDirection_setDirection関数は、前回の記事の方位計に対して、今回新しく追加した関数になります。中身としては、現在の方位を外部から設定できるようにしただけです。</P>
<DIV class="code-frame" data-lang="c">
<DIV class="code-lang"><SPAN class="bold">app.c</SPAN></DIV>
<DIV class="highlight">
<PRE><SPAN class="cp">#include "ev3api.h"</SPAN>
<SPAN class="cp">#include "app.h"</SPAN>
<SPAN class="cp">#include "Distance.h"</SPAN>
<SPAN class="cp">#include "Direction.h"</SPAN>
<SPAN class="cp">#include "Grid.h"</SPAN>

<SPAN class="cp">#if defined(BUILD_MODULE)</SPAN>
<SPAN class="cp">#include "module_cfg.h"</SPAN>
<SPAN class="cp">#else</SPAN>
<SPAN class="cp">#include "kernel_cfg.h"</SPAN>
<SPAN class="cp">#endif</SPAN>

<SPAN class="cp">#define DEBUG</SPAN>

<SPAN class="cp">#ifdef DEBUG</SPAN>
<SPAN class="cp">#define _debug(x) (x)</SPAN>
<SPAN class="cp">#else</SPAN>
<SPAN class="cp">#define _debug(x)</SPAN>
<SPAN class="cp">#endif</SPAN>

<SPAN class="c1">// 構造体に格納されている目標座標の数</SPAN>
<SPAN class="cp">#define GRID_NUM 4</SPAN>

<SPAN class="cm">/**</SPAN>
<SPAN class="cm"> * Global variables</SPAN>
<SPAN class="cm"> */</SPAN>
<SPAN class="k">typedef</SPAN> <SPAN class="k">enum</SPAN> <SPAN class="p">{</SPAN>
    <SPAN class="n">TURN</SPAN><SPAN class="p">,</SPAN> <SPAN class="c1">// 目標座標の方位へ向くまで旋回</SPAN>
    <SPAN class="n">MOVE</SPAN><SPAN class="p">,</SPAN> <SPAN class="c1">// 目標座標に到達するまで前進</SPAN>
    <SPAN class="n">END</SPAN>   <SPAN class="c1">// 構造体に格納されている座標を移動しきったら停止</SPAN>
<SPAN class="p">}</SPAN> <SPAN class="n">RUN_STATE</SPAN><SPAN class="p">;</SPAN>

<SPAN class="c1">//目標座標情報の構造体</SPAN>
<SPAN class="k">struct</SPAN> <SPAN class="n">GRID_XY</SPAN> <SPAN class="p">{</SPAN>
    <SPAN class="kt">int</SPAN> <SPAN class="n">gridX</SPAN><SPAN class="p">;</SPAN>
    <SPAN class="kt">int</SPAN> <SPAN class="n">gridY</SPAN><SPAN class="p">;</SPAN>
<SPAN class="p">};</SPAN>

<SPAN class="kt">void</SPAN> <SPAN class="nf">main_task</SPAN><SPAN class="p">(</SPAN><SPAN class="kt">intptr_t</SPAN> <SPAN class="n">unused</SPAN><SPAN class="p">)</SPAN> <SPAN class="p">{</SPAN>
    <SPAN class="k">static</SPAN> <SPAN class="n">RUN_STATE</SPAN> <SPAN class="n">state</SPAN> <SPAN class="o">=</SPAN> <SPAN class="n">TURN</SPAN><SPAN class="p">;</SPAN>
    <SPAN class="k">struct</SPAN> <SPAN class="n">GRID_XY</SPAN> <SPAN class="n">target_grid</SPAN><SPAN class="p">[</SPAN><SPAN class="n">GRID_NUM</SPAN><SPAN class="p">]</SPAN> <SPAN class="o">=</SPAN> <SPAN class="p">{{</SPAN><SPAN class="mi">2</SPAN><SPAN class="p">,</SPAN><SPAN class="mi">5</SPAN><SPAN class="p">},</SPAN>
                                            <SPAN class="p">{</SPAN><SPAN class="mi">3</SPAN><SPAN class="p">,</SPAN><SPAN class="mi">3</SPAN><SPAN class="p">},</SPAN>
                                            <SPAN class="p">{</SPAN><SPAN class="mi">4</SPAN><SPAN class="p">,</SPAN><SPAN class="mi">2</SPAN><SPAN class="p">},</SPAN>
                                            <SPAN class="p">{</SPAN><SPAN class="mi">5</SPAN><SPAN class="p">,</SPAN><SPAN class="mi">5</SPAN><SPAN class="p">}</SPAN> <SPAN class="p">};</SPAN>
    <SPAN class="kt">int</SPAN> <SPAN class="n">cur_gridX</SPAN> <SPAN class="o">=</SPAN> <SPAN class="mi">0</SPAN><SPAN class="p">;</SPAN> <SPAN class="c1">// 現在位置座標のX値</SPAN>
    <SPAN class="kt">int</SPAN> <SPAN class="n">cur_gridY</SPAN> <SPAN class="o">=</SPAN> <SPAN class="mi">0</SPAN><SPAN class="p">;</SPAN> <SPAN class="c1">// 現在位置座標のY値</SPAN>
    <SPAN class="kt">float</SPAN> <SPAN class="n">target_dir</SPAN> <SPAN class="o">=</SPAN> <SPAN class="mf">0.0</SPAN><SPAN class="p">;</SPAN> <SPAN class="c1">// 現在位置座標から目標座標までの距離</SPAN>
    <SPAN class="kt">float</SPAN> <SPAN class="n">target_dis</SPAN> <SPAN class="o">=</SPAN> <SPAN class="mf">0.0</SPAN><SPAN class="p">;</SPAN> <SPAN class="c1">// 現在位置座標から目標座標までの方位</SPAN>
    <SPAN class="kt">float</SPAN> <SPAN class="n">cur_dir</SPAN> <SPAN class="o">=</SPAN> <SPAN class="mf">0.0</SPAN><SPAN class="p">;</SPAN> <SPAN class="c1">// 方位計の現在値</SPAN>
    <SPAN class="kt">float</SPAN> <SPAN class="n">cur_dis</SPAN> <SPAN class="o">=</SPAN> <SPAN class="mf">0.0</SPAN><SPAN class="p">;</SPAN> <SPAN class="c1">// 距離計の現在値</SPAN>
    <SPAN class="kt">int</SPAN> <SPAN class="n">grid_count</SPAN> <SPAN class="o">=</SPAN> <SPAN class="mi">0</SPAN><SPAN class="p">;</SPAN>  <SPAN class="c1">// 目標座標構造体への参照カウンタ</SPAN>


    <SPAN class="cm">/* モーター出力ポートの設定 */</SPAN>
    <SPAN class="n">ev3_motor_config</SPAN><SPAN class="p">(</SPAN><SPAN class="n">EV3_PORT_C</SPAN><SPAN class="p">,</SPAN> <SPAN class="n">LARGE_MOTOR</SPAN><SPAN class="p">);</SPAN>
    <SPAN class="n">ev3_motor_config</SPAN><SPAN class="p">(</SPAN><SPAN class="n">EV3_PORT_B</SPAN><SPAN class="p">,</SPAN> <SPAN class="n">LARGE_MOTOR</SPAN><SPAN class="p">);</SPAN>

    <SPAN class="cm">/* 計測器初期化 */</SPAN>
    <SPAN class="n">Distance_init</SPAN><SPAN class="p">();</SPAN>
    <SPAN class="n">Direction_init</SPAN><SPAN class="p">();</SPAN>

    <SPAN class="c1">// 目標座標までの方位，距離を格納</SPAN>
    <SPAN class="n">Grid_setDistance</SPAN><SPAN class="p">(</SPAN><SPAN class="n">cur_gridX</SPAN><SPAN class="p">,</SPAN> <SPAN class="n">cur_gridY</SPAN><SPAN class="p">,</SPAN> <SPAN class="n">target_grid</SPAN><SPAN class="p">[</SPAN><SPAN class="n">grid_count</SPAN><SPAN class="p">].</SPAN><SPAN class="n">gridX</SPAN><SPAN class="p">,</SPAN> <SPAN class="n">target_grid</SPAN><SPAN class="p">[</SPAN><SPAN class="n">grid_count</SPAN><SPAN class="p">].</SPAN><SPAN class="n">gridY</SPAN><SPAN class="p">);</SPAN>
    <SPAN class="n">Grid_setDirection</SPAN><SPAN class="p">(</SPAN><SPAN class="n">cur_gridX</SPAN><SPAN class="p">,</SPAN> <SPAN class="n">cur_gridY</SPAN><SPAN class="p">,</SPAN> <SPAN class="n">target_grid</SPAN><SPAN class="p">[</SPAN><SPAN class="n">grid_count</SPAN><SPAN class="p">].</SPAN><SPAN class="n">gridX</SPAN><SPAN class="p">,</SPAN> <SPAN class="n">target_grid</SPAN><SPAN class="p">[</SPAN><SPAN class="n">grid_count</SPAN><SPAN class="p">].</SPAN><SPAN class="n">gridY</SPAN><SPAN class="p">);</SPAN>
    <SPAN class="n">target_dis</SPAN> <SPAN class="o">=</SPAN> <SPAN class="n">Grid_getDistance</SPAN><SPAN class="p">();</SPAN>
    <SPAN class="n">target_dir</SPAN> <SPAN class="o">=</SPAN> <SPAN class="n">Grid_getDirection</SPAN><SPAN class="p">();</SPAN>

    <SPAN class="k">while</SPAN><SPAN class="p">(</SPAN><SPAN class="mi">1</SPAN><SPAN class="p">)</SPAN> <SPAN class="p">{</SPAN>
        <SPAN class="cm">/* 計測器更新 */</SPAN>
        <SPAN class="n">Distance_update</SPAN><SPAN class="p">();</SPAN>
        <SPAN class="n">Direction_update</SPAN><SPAN class="p">();</SPAN>
        <SPAN class="c1">// 計測器の現在値を格納</SPAN>
        <SPAN class="n">cur_dis</SPAN> <SPAN class="o">=</SPAN> <SPAN class="n">Distance_getDistance</SPAN><SPAN class="p">();</SPAN>
        <SPAN class="n">cur_dir</SPAN> <SPAN class="o">=</SPAN> <SPAN class="n">Direction_getDirection</SPAN><SPAN class="p">();</SPAN>

        <SPAN class="k">switch</SPAN><SPAN class="p">(</SPAN><SPAN class="n">state</SPAN><SPAN class="p">)</SPAN> <SPAN class="p">{</SPAN>
        <SPAN class="k">case</SPAN> <SPAN class="nl">TURN</SPAN><SPAN class="p">:</SPAN>
            <SPAN class="c1">// 指定方位まで旋回する</SPAN>
            <SPAN class="k">if</SPAN><SPAN class="p">(</SPAN><SPAN class="n">cur_dir</SPAN> <SPAN class="o">&lt;</SPAN> <SPAN class="n">target_dir</SPAN><SPAN class="p">)</SPAN> <SPAN class="p">{</SPAN>
                <SPAN class="n">ev3_motor_set_power</SPAN><SPAN class="p">(</SPAN><SPAN class="n">EV3_PORT_C</SPAN><SPAN class="p">,</SPAN> <SPAN class="mi">10</SPAN><SPAN class="p">);</SPAN>
                <SPAN class="n">ev3_motor_set_power</SPAN><SPAN class="p">(</SPAN><SPAN class="n">EV3_PORT_B</SPAN><SPAN class="p">,</SPAN> <SPAN class="o">-</SPAN><SPAN class="mi">10</SPAN><SPAN class="p">);</SPAN>
            <SPAN class="p">}</SPAN> <SPAN class="k">else</SPAN> <SPAN class="p">{</SPAN>
                <SPAN class="n">ev3_motor_set_power</SPAN><SPAN class="p">(</SPAN><SPAN class="n">EV3_PORT_C</SPAN><SPAN class="p">,</SPAN> <SPAN class="o">-</SPAN><SPAN class="mi">10</SPAN><SPAN class="p">);</SPAN>
                <SPAN class="n">ev3_motor_set_power</SPAN><SPAN class="p">(</SPAN><SPAN class="n">EV3_PORT_B</SPAN><SPAN class="p">,</SPAN> <SPAN class="mi">10</SPAN><SPAN class="p">);</SPAN>
            <SPAN class="p">}</SPAN>
            <SPAN class="c1">// 指定方位の一定範囲内に収まったら，移動開始</SPAN>
            <SPAN class="k">if</SPAN><SPAN class="p">(</SPAN> <SPAN class="p">(</SPAN><SPAN class="n">cur_dir</SPAN> <SPAN class="o">&gt;</SPAN> <SPAN class="p">(</SPAN><SPAN class="n">target_dir</SPAN><SPAN class="o">-</SPAN><SPAN class="mf">1.0</SPAN><SPAN class="p">))</SPAN> <SPAN class="o">&amp;&amp;</SPAN> <SPAN class="p">(</SPAN><SPAN class="n">cur_dir</SPAN> <SPAN class="o">&lt;</SPAN> <SPAN class="p">(</SPAN><SPAN class="n">target_dir</SPAN><SPAN class="o">+</SPAN><SPAN class="mf">1.0</SPAN><SPAN class="p">))</SPAN> <SPAN class="p">)</SPAN> <SPAN class="p">{;</SPAN>
                <SPAN class="n">state</SPAN> <SPAN class="o">=</SPAN> <SPAN class="n">MOVE</SPAN><SPAN class="p">;</SPAN>
            <SPAN class="p">}</SPAN>
            <SPAN class="k">break</SPAN><SPAN class="p">;</SPAN>
        <SPAN class="k">case</SPAN> <SPAN class="nl">MOVE</SPAN><SPAN class="p">:</SPAN>
            <SPAN class="n">ev3_motor_set_power</SPAN><SPAN class="p">(</SPAN><SPAN class="n">EV3_PORT_C</SPAN><SPAN class="p">,</SPAN> <SPAN class="mi">10</SPAN><SPAN class="p">);</SPAN>
            <SPAN class="n">ev3_motor_set_power</SPAN><SPAN class="p">(</SPAN><SPAN class="n">EV3_PORT_B</SPAN><SPAN class="p">,</SPAN> <SPAN class="mi">10</SPAN><SPAN class="p">);</SPAN>

            <SPAN class="c1">// 指定位置までたどり着いたら状態遷移</SPAN>
            <SPAN class="k">if</SPAN><SPAN class="p">(</SPAN> <SPAN class="p">(</SPAN><SPAN class="n">cur_dis</SPAN> <SPAN class="o">&gt;</SPAN> <SPAN class="n">target_dis</SPAN><SPAN class="p">)</SPAN>  <SPAN class="o">&amp;&amp;</SPAN> <SPAN class="p">(</SPAN><SPAN class="n">grid_count</SPAN> <SPAN class="o">&lt;</SPAN> <SPAN class="p">(</SPAN><SPAN class="n">GRID_NUM</SPAN><SPAN class="o">-</SPAN><SPAN class="mi">1</SPAN><SPAN class="p">))</SPAN> <SPAN class="p">)</SPAN> <SPAN class="p">{</SPAN>
                <SPAN class="c1">// 現在位置座標を更新</SPAN>
                <SPAN class="n">cur_gridX</SPAN> <SPAN class="o">=</SPAN> <SPAN class="n">target_grid</SPAN><SPAN class="p">[</SPAN><SPAN class="n">grid_count</SPAN><SPAN class="p">].</SPAN><SPAN class="n">gridX</SPAN><SPAN class="p">;</SPAN>
                <SPAN class="n">cur_gridY</SPAN> <SPAN class="o">=</SPAN> <SPAN class="n">target_grid</SPAN><SPAN class="p">[</SPAN><SPAN class="n">grid_count</SPAN><SPAN class="p">].</SPAN><SPAN class="n">gridY</SPAN><SPAN class="p">;</SPAN>
                <SPAN class="c1">// 計測器情報のリセット</SPAN>
                <SPAN class="n">Distance_init</SPAN><SPAN class="p">();</SPAN>
                <SPAN class="n">Direction_setDirection</SPAN><SPAN class="p">(</SPAN><SPAN class="n">target_dir</SPAN><SPAN class="p">);</SPAN>
                <SPAN class="c1">// 次の座標までの方位，距離を格納する</SPAN>
                <SPAN class="n">grid_count</SPAN><SPAN class="o">++</SPAN><SPAN class="p">;</SPAN>
                <SPAN class="n">Grid_setDistance</SPAN><SPAN class="p">(</SPAN><SPAN class="n">cur_gridX</SPAN><SPAN class="p">,</SPAN> <SPAN class="n">cur_gridY</SPAN><SPAN class="p">,</SPAN> <SPAN class="n">target_grid</SPAN><SPAN class="p">[</SPAN><SPAN class="n">grid_count</SPAN><SPAN class="p">].</SPAN><SPAN class="n">gridX</SPAN><SPAN class="p">,</SPAN> <SPAN class="n">target_grid</SPAN><SPAN class="p">[</SPAN><SPAN class="n">grid_count</SPAN><SPAN class="p">].</SPAN><SPAN class="n">gridY</SPAN><SPAN class="p">);</SPAN>
                <SPAN class="n">Grid_setDirection</SPAN><SPAN class="p">(</SPAN><SPAN class="n">cur_gridX</SPAN><SPAN class="p">,</SPAN> <SPAN class="n">cur_gridY</SPAN><SPAN class="p">,</SPAN> <SPAN class="n">target_grid</SPAN><SPAN class="p">[</SPAN><SPAN class="n">grid_count</SPAN><SPAN class="p">].</SPAN><SPAN class="n">gridX</SPAN><SPAN class="p">,</SPAN> <SPAN class="n">target_grid</SPAN><SPAN class="p">[</SPAN><SPAN class="n">grid_count</SPAN><SPAN class="p">].</SPAN><SPAN class="n">gridY</SPAN><SPAN class="p">);</SPAN>
                <SPAN class="n">target_dis</SPAN> <SPAN class="o">=</SPAN> <SPAN class="n">Grid_getDistance</SPAN><SPAN class="p">();</SPAN>
                <SPAN class="n">target_dir</SPAN> <SPAN class="o">=</SPAN> <SPAN class="n">Grid_getDirection</SPAN><SPAN class="p">();</SPAN>

                <SPAN class="c1">// 再度，次座標への旋回を開始</SPAN>
                <SPAN class="n">state</SPAN> <SPAN class="o">=</SPAN> <SPAN class="n">TURN</SPAN><SPAN class="p">;</SPAN>
            <SPAN class="p">}</SPAN> <SPAN class="k">else</SPAN>
                <SPAN class="k">if</SPAN><SPAN class="p">(</SPAN> <SPAN class="p">(</SPAN><SPAN class="n">cur_dis</SPAN> <SPAN class="o">&gt;</SPAN> <SPAN class="n">target_dis</SPAN><SPAN class="p">)</SPAN> <SPAN class="o">&amp;&amp;</SPAN> <SPAN class="p">(</SPAN><SPAN class="n">grid_count</SPAN> <SPAN class="o">&gt;=</SPAN> <SPAN class="p">(</SPAN><SPAN class="n">GRID_NUM</SPAN><SPAN class="o">-</SPAN><SPAN class="mi">1</SPAN><SPAN class="p">))</SPAN> <SPAN class="p">)</SPAN> <SPAN class="p">{</SPAN>
                    <SPAN class="n">state</SPAN> <SPAN class="o">=</SPAN> <SPAN class="n">END</SPAN><SPAN class="p">;</SPAN>
                <SPAN class="p">}</SPAN>
            <SPAN class="k">break</SPAN><SPAN class="p">;</SPAN>
        <SPAN class="k">case</SPAN> <SPAN class="nl">END</SPAN><SPAN class="p">:</SPAN>
            <SPAN class="c1">// モータを停止</SPAN>
            <SPAN class="n">ev3_motor_stop</SPAN><SPAN class="p">(</SPAN><SPAN class="n">EV3_PORT_C</SPAN><SPAN class="p">,</SPAN> <SPAN class="nb">true</SPAN><SPAN class="p">);</SPAN>
            <SPAN class="n">ev3_motor_stop</SPAN><SPAN class="p">(</SPAN><SPAN class="n">EV3_PORT_B</SPAN><SPAN class="p">,</SPAN> <SPAN class="nb">true</SPAN><SPAN class="p">);</SPAN>
            <SPAN class="k">break</SPAN><SPAN class="p">;</SPAN>
        <SPAN class="k">default</SPAN><SPAN class="o">:</SPAN>
            <SPAN class="k">break</SPAN><SPAN class="p">;</SPAN>
        <SPAN class="p">}</SPAN>
    <SPAN class="p">}</SPAN>
<SPAN class="p">}</SPAN>
</PRE></DIV></DIV>
<DIV class="code-frame" data-lang="text">
<DIV class="code-lang"><SPAN class="bold">Direction.c（追加分）</SPAN></DIV>
<DIV class="highlight">
<PRE>/* 方位を設定 */
void Direction_setDirection(float set_dir){
    direction = set_dir;
}
</PRE></DIV></DIV>
<DIV class="hidden">
<FORM class="js-task-list-update" action="/TetsuroAkagawa/items/075d74f5ab49f592450b" 
method="post" 
accept-charset="UTF-8"><INPUT name="utf8" type="hidden" value="✓"><INPUT name="_method" type="hidden" value="patch"><INPUT name="authenticity_token" type="hidden" value="Fo0TuTW6M0Qe3BMAAxCXSJDMlgP2Ys1namwwo24zLf3RWPgxSIcPqojXFRGGxYDG6TeIu1dYwHZixe4kapEtdw=="><INPUT name="updated_at_confirmation_in_unixtime" class="js-task-list-updated-at" id="updated_at_confirmation_in_unixtime" type="hidden" value="1485488368"><TEXTAREA name="raw_body" class="js-task-list-field" id="raw_body">#座標移動計算
##座標移動の概要
　第一回の距離計、第二回の方位計ときて、今回の第三回では「座標移動」を紹介します。これは、距離と方位を利用した応用技術になります。
　座標移動とは、ロボットが移動する範囲を座標として考えて、その座標上の位置を指定しながらロボットを移動させていく技術となります。この技術を用いれば、座標位置を指定するだけでロボットを自由に移動させて動かすことができます。ただし、座標移動に用いている距離計、方位計には、移動するごとにタイヤのスリップなどで誤差が生じていきます。よって、正確な移動が求められる場合には、「床の色」や「障害物にぶつかった際のジャイロの変動」などをトリガに、細かい間隔で距離計や方位計をリセットしていく必要があります。

##座標移動の計算式
　それでは、座標移動の考え方を説明していきます。まずロボットがいる現在位置座標 a のXY座標を[aX, aY]とします。また移動目標座標 b のXY座標を[bX, bY]とします。すると、その座標 a と座標 b の2点間の関係性は下図のようになります。

![moveImg.png](https://qiita-image-store.s3.amazonaws.com/0/153774/fd2df3c6-861c-6cd5-80b7-a539a60357fa.png)

　この図での赤い線が「現在位置座標から目標座標までの距離」となります。また上図での角度 θ 、つまり「現在位置座標からの目標座標への方位」は逆三角関数から計算することができ、arctanで表すことができます。逆三角関数について詳しく知りたい場合は、検索してみると多く説明されているので調べてみましょう。

#座標移動のサンプルプログラム
それでは座標移動関数のサンプルプログラムを用意しましたので、その説明をします。といっても、Grid.c内に記述されていることは、基本的に上記で説明した計算式を記述しているだけです。
　Grid_setDistance関数、Grid_setDirection関数の設定関数から、「移動目標座標までの距離」「移動目標座標への方位」を設定します。その後、Grid_getDistance関数とGrid_getDirection関数の取得関数を用いて、それぞれの値を利用します。
　この部分についての使い方も以前説明した「距離計」※1、「方位計」※2と大体同じ使い方になります。目標座標に移動を開始する最初の段階で、まず設定関数を呼び出して距離と方位を設定し、条件式などで値が必要な場合は取得関数から値を取り出します。

※1 「ETロボコンにおける自己位置計測（その1、距離計編） with EV3」
- http://qiita.com/PsychoGundam009/items/ba6190f08d26df7cc8ad
※2 「ETロボコンにおける自己位置計測（その２、方位計編） with EV3」
- http://qiita.com/PsychoGundam009/items/4e7de30523d9c7ec6241

```Grid.c
#include "Grid.h"

#define GRID_SIZE 100.0 //座標のマス幅（100mm） 

static float grid_distance = 0.0; //現在座標から目標座標までの距離
static float grid_direction = 0.0;//現在座標から目標座標の方位

/* 初期化関数 */
void Grid_init() {
	grid_distance = 0.0;
	grid_direction = 0.0;
}

/* 座標aから座標bまでの移動距離を設定する関数 */
void Grid_setDistance(int aX, int aY, int bX, int bY) {
	grid_distance = sqrt( pow((float)(bX-aX),2) + pow((float)(bY-aY),2) ) *  GRID_SIZE;
}

/* 座標aから座標bまでの移動距離を取得する関数 */
float Grid_getDistance() {
	return grid_distance;
}

/* 目標座標の方位を設定する関数 */
void Grid_setDirection(int aX, int aY, int bX, int bY) {
	float targetDir = 0.0;// 目標方位

	//　座標aから座標bへの方位（ラジアン）を取得
	targetDir = atan2((float)(bY-aY), (float)(bX-aX));
	//ラジアンから度に変換
	targetDir = targetDir * 180.0 / PI;

	grid_direction = targetDir;
}

/* 目標座標の方位を取得する関数 */
float Grid_getDirection() {
	return grid_direction;
}
```


　Grid.hでは、cファイルで記述されている関数をまとめて宣言しています。
　ここで"Distance.h"をincludeしている理由は、Distance.h内で定義されている円周率を利用したいという理由だけです。また．math.hをincludeしていますが、これはたまにインクルードしてくれない（読み込めない）エラーが出ることがあります。これはMakefile.inc内の末尾に「LIBS += -lm -lc」を追加して書けば解決するので、もしエラーが出た場合は試してみてください。

```Grid.h
#ifndef _GRID_H_
#define _GRID_H_

#include "math.h"
#include "Distance.h"

/* 初期化関数 */
void Grid_init();
/* 座標aから座標bまでの移動距離を設定する関数 */
void Grid_setDistance(int aX, int aY, int bX, int bY);
/* 座標aから座標bまでの移動距離を取得する関数 */
float Grid_getDistance();

/* 目標座標の方位を設定する関数 */
void Grid_setDirection(int aX, int aY, int bX, int bY);
/* 目標座標の方位を取得する関数 */
float Grid_getDirection();

#endif
```

##座標移動プログラムの実行例（動画）
　以下に、座標移動関数の呼び出し実行例を載せます。ここでは開始位置座標[0,0]から順に[2,5]、[3,3]、[4,2]、[5,5]と移動していきます。
[![IMAGE ALT TEXT HERE](http://img.youtube.com/vi/zNoVS0vNRz0/0.jpg)](http://www.youtube.com/watch?v=zNoVS0vNRz0)

　以下がmain文での呼び出し記述例になります。先述の座標移動関数から「現在位置座標から目標座標までの方位」と「現在位置座標から目標座標までの距離」を取得し、その値をもとに旋回→移動→旋回→移動→...と繰り返して、各目標座標を移動していきます。また、ここで使っているDirection_setDirection関数は、前回の記事の方位計に対して、今回新しく追加した関数になります。中身としては、現在の方位を外部から設定できるようにしただけです。

```app.c
#include "ev3api.h"
#include "app.h"
#include "Distance.h"
#include "Direction.h"
#include "Grid.h"

#if defined(BUILD_MODULE)
#include "module_cfg.h"
#else
#include "kernel_cfg.h"
#endif

#define DEBUG

#ifdef DEBUG
#define _debug(x) (x)
#else
#define _debug(x)
#endif

// 構造体に格納されている目標座標の数
#define GRID_NUM 4

/**
 * Global variables
 */
typedef enum {
	TURN, // 目標座標の方位へ向くまで旋回
	MOVE, // 目標座標に到達するまで前進
	END   // 構造体に格納されている座標を移動しきったら停止
} RUN_STATE;

//目標座標情報の構造体
struct GRID_XY {
	int gridX;
	int gridY;
};

void main_task(intptr_t unused) {
	static RUN_STATE state = TURN;
	struct GRID_XY target_grid[GRID_NUM] = {{2,5},
	                                        {3,3},
	                                        {4,2},
		                                    {5,5} };
	int cur_gridX = 0; // 現在位置座標のX値
	int cur_gridY = 0; // 現在位置座標のY値
	float target_dir = 0.0; // 現在位置座標から目標座標までの距離
	float target_dis = 0.0; // 現在位置座標から目標座標までの方位
	float cur_dir = 0.0; // 方位計の現在値
	float cur_dis = 0.0; // 距離計の現在値
	int grid_count = 0;  // 目標座標構造体への参照カウンタ


	/* モーター出力ポートの設定 */
	ev3_motor_config(EV3_PORT_C, LARGE_MOTOR);
	ev3_motor_config(EV3_PORT_B, LARGE_MOTOR);

	/* 計測器初期化 */
	Distance_init();
	Direction_init();

	// 目標座標までの方位，距離を格納
	Grid_setDistance(cur_gridX, cur_gridY, target_grid[grid_count].gridX, target_grid[grid_count].gridY);
	Grid_setDirection(cur_gridX, cur_gridY, target_grid[grid_count].gridX, target_grid[grid_count].gridY);
	target_dis = Grid_getDistance();
	target_dir = Grid_getDirection();

	while(1) {
		/* 計測器更新 */
		Distance_update();
		Direction_update();
		// 計測器の現在値を格納
		cur_dis = Distance_getDistance();
		cur_dir = Direction_getDirection();

		switch(state) {
		case TURN:
			// 指定方位まで旋回する
			if(cur_dir &lt; target_dir) {
				ev3_motor_set_power(EV3_PORT_C, 10);
				ev3_motor_set_power(EV3_PORT_B, -10);
			} else {
				ev3_motor_set_power(EV3_PORT_C, -10);
				ev3_motor_set_power(EV3_PORT_B, 10);
			}
			// 指定方位の一定範囲内に収まったら，移動開始
			if( (cur_dir &gt; (target_dir-1.0)) &amp;&amp; (cur_dir &lt; (target_dir+1.0)) ) {;
				state = MOVE;
			}
			break;
		case MOVE:
			ev3_motor_set_power(EV3_PORT_C, 10);
			ev3_motor_set_power(EV3_PORT_B, 10);

			// 指定位置までたどり着いたら状態遷移
			if( (cur_dis &gt; target_dis)  &amp;&amp; (grid_count &lt; (GRID_NUM-1)) ) {
				// 現在位置座標を更新
				cur_gridX = target_grid[grid_count].gridX;
				cur_gridY = target_grid[grid_count].gridY;
				// 計測器情報のリセット
				Distance_init();
				Direction_setDirection(target_dir);
				// 次の座標までの方位，距離を格納する
				grid_count++;
				Grid_setDistance(cur_gridX, cur_gridY, target_grid[grid_count].gridX, target_grid[grid_count].gridY);
				Grid_setDirection(cur_gridX, cur_gridY, target_grid[grid_count].gridX, target_grid[grid_count].gridY);
				target_dis = Grid_getDistance();
				target_dir = Grid_getDirection();

				// 再度，次座標への旋回を開始
				state = TURN;
			} else
				if( (cur_dis &gt; target_dis) &amp;&amp; (grid_count &gt;= (GRID_NUM-1)) ) {
					state = END;
				}
			break;
		case END:
			// モータを停止
			ev3_motor_stop(EV3_PORT_C, true);
			ev3_motor_stop(EV3_PORT_B, true);
			break;
		default:
			break;
		}
	}
}
```

```Direction.c（追加分）
/* 方位を設定 */
void Direction_setDirection(float set_dir){
	direction = set_dir;
}
```
</TEXTAREA><INPUT name="commit" type="submit" value="Save changes" data-disable-with="Save changes"></FORM></DIV></SECTION></DIV>
<DIV class="col-sm-3">
<DIV class="socialButtons">
<DIV class="socialButtons_twitter"><A class="twitter-share-button" href="https://twitter.com/share" 
data-url="http://qiita.com/TetsuroAkagawa/items/075d74f5ab49f592450b" data-text="ETロボコンにおける自己位置計測（その3、座標移動編） with EV3 by @PsychoGundam009 on @Qiita">ツイート</A></DIV>
<DIV class="socialButtons_hatebu"><A title="はてブに追加" class="hatena-bookmark-button" 
href="http://b.hatena.ne.jp/entry/http://qiita.com/TetsuroAkagawa/items/075d74f5ab49f592450b" 
data-hatena-bookmark-title="ETロボコンにおける自己位置計測（その3、座標移動編） with EV3" 
data-hatena-bookmark-layout="simple-balloon"><IMG width="20" height="20" style="border: currentColor; border-image: none;" 
alt="はてブに追加" src="ETロボコンにおける自己位置計測（その3、座標移動編）%20with%20EV3%20-%20Qiita.files/button-only@2x.png"></A>
<SCRIPT src="ETロボコンにおける自己位置計測（その3、座標移動編）%20with%20EV3%20-%20Qiita.files/bookmark_button.js" type="text/javascript" charset="utf-8" async="async"></SCRIPT>
</DIV>
<DIV class="socialButtons_googlePlus">
<DIV class="g-plusone" data-size="medium" data-href="http://qiita.com/TetsuroAkagawa/items/075d74f5ab49f592450b"></DIV></DIV>
<DIV class="socialButtons_facebook">
<DIV class="fb-like" data-href="http://qiita.com/TetsuroAkagawa/items/075d74f5ab49f592450b" 
data-show-faces="false" data-share="false" data-layout="button_count" 
data-action="like"></DIV></DIV>
<DIV class="socialButtons_pocket"><A class="pocket-btn" data-lang="en" 
data-pocket-label="pocket" 
data-pocket-count="horizontal"></A></DIV></DIV><SECTION class="itemsShowAuthorInfo" 
itemtype="http://schema.org/Person" itemscope="" itemprop="author"><A href="http://qiita.com/TetsuroAkagawa"><IMG 
class="itemsShowAuthorInfo_userIcon" alt="" src="ETロボコンにおける自己位置計測（その3、座標移動編）%20with%20EV3%20-%20Qiita.files/5QJm6PLv_normal.jpg" 
itemprop="image"></A>
<DIV class="itemsShowAuthorInfo_profileStats"><STRONG class="itemsShowAuthorInfo_userName" 
itemprop="name"><A href="http://qiita.com/TetsuroAkagawa" 
itemprop="url">TetsuroAkagawa</A></STRONG>
<DIV class="itemsShowAuthorInfo_contribution"><SPAN class="itemsShowAuthorInfo_count">9</SPAN><SPAN 
class="itemsShowAuthorInfo_unit">Contribution</SPAN></DIV>
<SCRIPT id="js-react-on-rails-context" type="application/json">null</SCRIPT>
 
<SCRIPT class="js-react-on-rails-component" type="application/json">{"component_name":"UserFollowButton","props":{"initial_followed_by":false,"position":"author-info","size":"btn-xs","url_name":"TetsuroAkagawa"},"trace":false,"dom_id":"UserFollowButton-react-component-bd69d766-7a3b-4e2f-8580-88130bd177bd"}</SCRIPT>
     
<DIV 
id="UserFollowButton-react-component-bd69d766-7a3b-4e2f-8580-88130bd177bd"></DIV></DIV><SECTION 
class="itemsShowAuthorPopularItems">
<H5 class="itemsShowAuthorPopularItems_sectionTitle">人気の投稿</H5>
<UL class="itemsShowAuthorPopularItems_posts list-unstyled">
  <LI itemtype="http://schema.org/Article" itemscope=""><A href="http://qiita.com/TetsuroAkagawa/items/ba6190f08d26df7cc8ad" 
  itemprop="url" data-label="AuthorPopularItemsAtSidebar" 
  track="click">ETロボコンにおける自己位置計測（その1、距離計編） with EV3</A></LI>
  <LI itemtype="http://schema.org/Article" itemscope=""><A href="http://qiita.com/TetsuroAkagawa/items/4e7de30523d9c7ec6241" 
  itemprop="url" data-label="AuthorPopularItemsAtSidebar" 
  track="click">ETロボコンにおける自己位置計測（その２、方位計編） with EV3</A></LI>
  <LI itemtype="http://schema.org/Article" itemscope=""><A href="http://qiita.com/TetsuroAkagawa/items/075d74f5ab49f592450b" 
  itemprop="url" data-label="AuthorPopularItemsAtSidebar" 
  track="click">ETロボコンにおける自己位置計測（その3、座標移動編） with EV3</A></LI>
  <LI itemtype="http://schema.org/Article" itemscope=""><A href="http://qiita.com/TetsuroAkagawa/items/1798c12e9517e6f1cbe9" 
  itemprop="url" data-label="AuthorPopularItemsAtSidebar" 
  track="click">ETロボコンにおける自己位置の応用（エリア分割） with EV3   
</A></LI></UL></SECTION></SECTION>
<DIV class="scroll-chaser">
<DIV class="ad_frame_right_banner_1"></DIV>
<SCRIPT src="ETロボコンにおける自己位置計測（その3、座標移動編）%20with%20EV3%20-%20Qiita.files/adjs_set_pro.js" defer="" type="text/javascript" charset="UTF-8" async=""></SCRIPT>
</DIV>
<SCRIPT class="js-react-on-rails-component" type="application/json">{"component_name":"Toc","props":{"body":"\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"#%E5%BA%A7%E6%A8%99%E7%A7%BB%E5%8B%95%E8%A8%88%E7%AE%97\"\u003e座標移動計算\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"#%E5%BA%A7%E6%A8%99%E7%A7%BB%E5%8B%95%E3%81%AE%E6%A6%82%E8%A6%81\"\u003e座標移動の概要\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"#%E5%BA%A7%E6%A8%99%E7%A7%BB%E5%8B%95%E3%81%AE%E8%A8%88%E7%AE%97%E5%BC%8F\"\u003e座標移動の計算式\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"#%E5%BA%A7%E6%A8%99%E7%A7%BB%E5%8B%95%E3%81%AE%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0\"\u003e座標移動のサンプルプログラム\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"#%E5%BA%A7%E6%A8%99%E7%A7%BB%E5%8B%95%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E3%81%AE%E5%AE%9F%E8%A1%8C%E4%BE%8B%E5%8B%95%E7%94%BB\"\u003e座標移動プログラムの実行例（動画）\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n","wrapper":"#article-body-wrapper"},"trace":false,"dom_id":"Toc-react-component-6c13a8c6-c3a7-437b-b000-fc410c70dcbd"}</SCRIPT>
     
<DIV 
id="Toc-react-component-6c13a8c6-c3a7-437b-b000-fc410c70dcbd"></DIV></DIV></DIV>
<DIV class="row">
<DIV class="col-sm-9">
<DIV class="ArticleFooter__menu">
<DIV class="s-flex-align-center">
<DIV class="js-likebutton" data-props='{"like_status":false,"like_count":1,"show_count":true,"uuid":"075d74f5ab49f592450b","likable_type":"Article","position":"article-footer"}'></DIV>
<DIV class="ArticleFooter__userList">
<DIV class="ArticleFooter__user">
<DIV class="js-hovercard" data-hovercard-target-name="mossandayo"><A href="http://qiita.com/mossandayo" 
itemprop="url"><IMG class="thumb thumb--xs" alt="mossandayo" src="ETロボコンにおける自己位置計測（その3、座標移動編）%20with%20EV3%20-%20Qiita.files/1476924209.png"></A></DIV></DIV></DIV></DIV>
<DIV class="u-flex u-align-center">
<DIV class="ArticleFooter__stock">
<DIV class="js-stockbutton" data-props='{"stock_status":false}' data-position="footer_menu"></DIV></DIV>
<DIV class="ArticleFooter__editRequest"><A title="投稿者に記事をより良くするための提案ができます 💪" 
class="u-link-no-underline" href="http://qiita.com/drafts/075d74f5ab49f592450b/edit" 
data-toggle="tooltip"><SPAN class="fa fa-send-o fa-lg"></SPAN> 
<SPAN>編集リクエスト</SPAN></A></DIV>
<DIV class="dropdown ArticleFooter__dropdown"><A class="dropdown-toggle" href="http://qiita.com/TetsuroAkagawa/items/075d74f5ab49f592450b#" 
data-toggle="dropdown"><SPAN class="fa fa-ellipsis-h"></SPAN></A>
<UL class="dropdown-menu dropdown-menu-right">
  <LI><A 
  href="http://qiita.com/TetsuroAkagawa/items/075d74f5ab49f592450b.md"><SPAN 
  class="fa fa-fw fa-file-text-o"></SPAN> Markdownで本文を見る</A></LI>
  <LI><A href="http://qiita.com/TetsuroAkagawa/items/075d74f5ab49f592450b#" 
  data-toggle="modal" data-target=".js-report-form"><I 
  class="fa fa-fw fa-flag"></I> 問題がある投稿を報告する</A></LI></UL></DIV></DIV></DIV>
<UL class="references js-referencesView">
  <LI class="references_header"><I class="fa fa-fw fa-link"></I> 
  この記事は以下の記事からリンクされています</LI>
  <LI class="references_reference js-reference"><A href="http://qiita.com/mossandayo/items/fab3c1fc2a97bb0fbcfc#_reference-607047c74b0c8baf2ae1"><IMG 
  width="18" height="18" alt="" src="ETロボコンにおける自己位置計測（その3、座標移動編）%20with%20EV3%20-%20Qiita.files/1476924209.png">EV3に関する技術記事まとめ</A><SPAN>からリンク</SPAN><time 
  class="references_datetime js-dateTimeView" datetime="2017-02-16T00:34:59+00:00">4ヶ月前</time></LI></UL>
<DIV class="itemsShowBody_articleColumnFooter">
<DIV class="socialButtons">
<DIV class="socialButtons_twitter"><A class="twitter-share-button" href="https://twitter.com/share" 
data-url="http://qiita.com/TetsuroAkagawa/items/075d74f5ab49f592450b" data-text="ETロボコンにおける自己位置計測（その3、座標移動編） with EV3 by @PsychoGundam009 on @Qiita">ツイート</A></DIV>
<DIV class="socialButtons_hatebu"><A title="はてブに追加" class="hatena-bookmark-button" 
href="http://b.hatena.ne.jp/entry/http://qiita.com/TetsuroAkagawa/items/075d74f5ab49f592450b" 
data-hatena-bookmark-title="ETロボコンにおける自己位置計測（その3、座標移動編） with EV3" 
data-hatena-bookmark-layout="simple-balloon"><IMG width="20" height="20" style="border: currentColor; border-image: none;" 
alt="はてブに追加" src="ETロボコンにおける自己位置計測（その3、座標移動編）%20with%20EV3%20-%20Qiita.files/button-only@2x.png"></A>
<SCRIPT src="ETロボコンにおける自己位置計測（その3、座標移動編）%20with%20EV3%20-%20Qiita.files/bookmark_button.js" type="text/javascript" charset="utf-8" async="async"></SCRIPT>
</DIV>
<DIV class="socialButtons_googlePlus">
<DIV class="g-plusone" data-size="medium" data-href="http://qiita.com/TetsuroAkagawa/items/075d74f5ab49f592450b"></DIV></DIV>
<DIV class="socialButtons_facebook">
<DIV class="fb-like" data-href="http://qiita.com/TetsuroAkagawa/items/075d74f5ab49f592450b" 
data-show-faces="false" data-share="false" data-layout="button_count" 
data-action="like"></DIV></DIV>
<DIV class="socialButtons_pocket"><A class="pocket-btn" data-lang="en" 
data-pocket-label="pocket" data-pocket-count="horizontal"></A></DIV></DIV></DIV>
<DIV class="itemsShowComment_wrapper" id="comments">
<SCRIPT class="js-react-on-rails-component" type="application/json">{"component_name":"PublicCommentListContainer","props":{"currentUser":null,"initialComments":[],"monthly_public_image_uploadable_size_limit":null,"total_uploaded_public_image_size_in_current_month":null,"item":{"id":461870,"uuid":"075d74f5ab49f592450b","suspended":false,"secret":false},"owner":{"url_name":"TetsuroAkagawa"},"is_team":false,"is_project":false,"logged_in":false,"polling":false,"mention_candidates":[{"id":153774,"url_name":"TetsuroAkagawa","profile_image_url":"https://pbs.twimg.com/profile_images/596090876847259648/5QJm6PLv_normal.jpg"}]},"trace":false,"dom_id":"PublicCommentListContainer-react-component-72200d89-5076-427c-af78-5d4b38cdbfbd"}</SCRIPT>
     
<DIV id="PublicCommentListContainer-react-component-72200d89-5076-427c-af78-5d4b38cdbfbd"></DIV></DIV></DIV></DIV></DIV></ARTICLE>
<DIV class="js-report-form modal fade reportForm">
<DIV class="modal-dialog">
<DIV class="modal-content">
<DIV class="modal-header"><BUTTON name="button" class="close" type="submit" 
data-dismiss="modal">×</BUTTON>
<H4 class="modal-title">問題がある投稿を報告する</H4></DIV>
<DIV class="modal-body">
<FORM action="/reports" method="post" 
accept-charset="UTF-8"><INPUT name="utf8" type="hidden" value="✓"><INPUT name="authenticity_token" type="hidden" value="DS7C2knrUf7pXatKTy2SVwYkjS/udzsLqLfB2Tde3l3K+ylSNNZtEH9WrVvK+IXZf9+Tl09NNhqgHh9eM/ze1w=="><INPUT name="redirect_path" id="redirect_path" type="hidden" value="/TetsuroAkagawa/items/075d74f5ab49f592450b"><INPUT name="item_uuid" id="item_uuid" type="hidden" value="075d74f5ab49f592450b">
<P>この投稿にどのような問題がありますか？</P><BR>
<DIV class="form-group">
<UL class="list-unstyled">
  <LI><LABEL><INPUT name="report_type" id="report_type_spam" required="required" 
  type="radio" value="spam"> スパムです </LABEL></LI>
  <LI><LABEL><INPUT name="report_type" id="report_type_harassment" required="required" 
  type="radio" value="harassment"> 攻撃的または迷惑な内容を含んでいます </LABEL></LI>
  <LI><LABEL><INPUT name="report_type" id="report_type_inappropriate_content" 
  required="required" type="radio" value="inappropriate_content"> 不適切な内容を含んでいます 
  </LABEL></LI></UL></DIV>
<DIV class="reportForm_submitButtonContainer"><BUTTON name="button" class="btn btn-primary reportForm_submitButton" 
type="submit"><I class="fa fa-send"></I> 
送信</BUTTON></DIV></FORM></DIV></DIV></DIV></DIV>
<SCRIPT id="js-item" type="application/json">{ "url": "http://qiita.com/TetsuroAkagawa/items/075d74f5ab49f592450b", "id": 461870, "uuid": "075d74f5ab49f592450b" }</SCRIPT>

<SCRIPT class="js-user" type="application/json">{&quot;id&quot;:153774,&quot;url_name&quot;:&quot;TetsuroAkagawa&quot;,&quot;profile_image_url&quot;:&quot;https://pbs.twimg.com/profile_images/596090876847259648/5QJm6PLv_normal.jpg&quot;}</SCRIPT>

<SCRIPT language="JavaScript" src="ETロボコンにおける自己位置計測（その3、座標移動編）%20with%20EV3%20-%20Qiita.files/qiita_bigmining.js" type="text/javascript"></SCRIPT>
</DIV><FOOTER class="footer">
<DIV class="footer_inner">
<DIV class="footer_container">
<UL class="footer_links-left">
  <LI class="footer_link"><A class="footer_copyright" href="http://increments.co.jp/">© 
  2011-2017 Increments Inc.</A></LI>
  <LI class="footer_link"><A href="http://qiita.com/terms">利用規約</A></LI>
  <LI class="footer_link"><A href="http://qiita.com/privacy">プライバシー</A></LI>
  <LI class="footer_link"><A href="http://help.qiita.com/">ヘルプ</A></LI>
  <LI class="footer_link"><A href="https://increments.zendesk.com/anonymous_requests/new">お問い合わせ</A></LI></UL>
<UL class="footer_links-right">
  <LI class="footer_link"><A href="http://qiita.com/about">Qiitaとは</A></LI>
  <LI class="footer_link"><A href="http://qiita.com/users">ユーザー</A></LI>
  <LI class="footer_link"><A href="http://qiita.com/tags">タグ</A></LI>
  <LI class="footer_link"><A href="http://blog.qiita.com/">ブログ</A></LI>
  <LI class="footer_link"><A href="http://qiita.com/api/v2/docs">API</A></LI>
  <LI class="footer_link"><A href="https://teams.qiita.com/">Team</A></LI>
  <LI class="footer_link"><A href="http://kobito.qiita.com/">Kobito</A></LI>
  <LI class="footer_link"><A class="js-public-form-feedback-link" href="http://qiita.com/TetsuroAkagawa/items/" 
  data-toggle="modal" data-target=".js-feedback-form"><I 
  class="fa fa-heart"></I> ご意見 <I 
class="fa fa-caret-down"></I></A></LI></UL></DIV></DIV></FOOTER>
<DIV class="js-feedback-form modal fade feedbackForm">
<DIV class="modal-dialog">
<DIV class="modal-content">
<DIV class="modal-header"><BUTTON name="button" class="close" type="submit" 
data-dismiss="modal">×</BUTTON>
<H4 class="modal-title">ご意見</H4></DIV>
<DIV class="modal-body">
<FORM class="js-feedback-form-form" action="/feedbacks" method="post" 
accept-charset="UTF-8"><INPUT name="utf8" type="hidden" value="✓"><INPUT name="authenticity_token" type="hidden" value="5hSszNqTJNAYU5AKoBx84WcEsUG2p76gduUMXhInfdohwUdEp64YPo5YlhslyWtvHv+v+Reds7F+TNLZFoV9UA=="><INPUT name="redirect_path" id="redirect_path" type="hidden" value="/TetsuroAkagawa/items/075d74f5ab49f592450b">
<DIV class="form-group"><TEXTAREA name="feedback[message]" class="form-control js-feedback-form-text-area" id="feedback_message" required="required" placeholder="Qiitaについてのご意見をお聞かせください。" rows="5">Qiitaについてのご意見をお聞かせください。</TEXTAREA></DIV>
<DIV class="feedbackForm_submitButtonContainer"><BUTTON name="button" class="btn btn-primary feedbackForm_submitButton" 
type="submit"><I class="fa fa-send"></I> 送信</BUTTON>
<P class="feedbackForm_note">いただいたご意見への返信は行っておりません。<BR>返信の必要な内容については、<A href="https://increments.zendesk.com/anonymous_requests/new">こちら</A> 
からお問い合わせください。</P></DIV>
<DIV style="top: -99999px; position: fixed; opacity: 0.0001;"><INPUT name="feedback[name]" type="text"></DIV></FORM></DIV></DIV></DIV></DIV>
<SCRIPT>// if (window.mixpanel instanceof Element) {
//   window.mixpanel = [];
// }
// (function(f,b){if(!b.__SV){var a,e,i,g;window.mixpanel=b;b._i=[];b.init=function(a,e,d){function f(b,h){var a=h.split(".");2==a.length&&(b=b[a[0]],h=a[1]);b[h]=function(){b.push([h].concat(Array.prototype.slice.call(arguments,0)))}}var c=b;"undefined"!==typeof d?c=b[d]=[]:d="mixpanel";c.people=c.people||[];c.toString=function(b){var a="mixpanel";"mixpanel"!==d&&(a+="."+d);b||(a+=" (stub)");return a};c.people.toString=function(){return c.toString(1)+".people (stub)"};i="disable track track_pageview track_links track_forms register register_once alias unregister identify name_tag set_config people.set people.set_once people.increment people.append people.track_charge people.clear_charges people.delete_user".split(" ");
// for(g=0;g<i.length;g++)f(c,i[g]);b._i.push([a,e,d])};b.__SV=1.2;a=f.createElement("script");a.type="text/javascript";a.async=!0;a.src="//cdn.mxpnl.com/libs/mixpanel-2.2.min.js";e=f.getElementsByTagName("script")[0];e.parentNode.insertBefore(a,e)}})(document,window.mixpanel||[]);</SCRIPT>

<SCRIPT src="ETロボコンにおける自己位置計測（その3、座標移動編）%20with%20EV3%20-%20Qiita.files/public-ea9634d328dd01703100922f07784313.min.js"></SCRIPT>

<SCRIPT>
  (function () {
    var script = document.getElementsByTagName('script')[0];
    var load = function (src, id) {
      var el = document.createElement('script');
      el.async = true;
      el.src = src;
      el.id = id;
      script.parentNode.insertBefore(el, script);
    };
      // Optimizely
      load('//cdn.optimizely.com/js/52738645.js', 'optimizely-jssdk');
      // Google Analytics
      window._gaq = window._gaq || [];
      var isCareer = location.hostname.split('.')[0] == 'career';
      if (isCareer) {
        window._gaq.push(['_setAccount', 'UA-24675221-11']);
        window._gaq.push(['_setDomainName', 'qiita.com']);
      } else {
        window._gaq.push(['_setAccount', 'UA-24675221-1']);
      }
      window._gaq.push(['_setCustomVar', 1, 'logged_in', 'false', 2]);
      window._gaq.push(['_trackPageview']);
      var src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      load(src, 'google-analytics-jssdk');
    // Google Analytics - Universal Analytics
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
        ga('create', 'UA-24675221-12', {
          
        });
          ga('create', 'UA-90226750-1', { name: 'user' });
          ga('user.send', 'pageview');
        ga('set', 'dimension1', 'false');
        ga('set', 'dimension3', 'false');
      ga('require', 'displayfeatures');
      ga('set', 'forceSSL', true);
      ga('send', 'pageview');
    // Google Tag Manager
      (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
      new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
      j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
      '//www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
      })(window,document,'script','dataLayer','GTM-TBQWPN');
  })();
</SCRIPT>
 </BODY></HTML>
